import { readFileSync } from "fs";

const input = readFileSync(`${__dirname}/test.txt`).toString();
const fields = input.split("\n");

const bitCount = fields[0].length;

function partOne() {
    const frequencies = new Array(bitCount).fill(0);

    fields.forEach((f) => {
        Array.from(f).forEach((v, i) => {
            frequencies[i] += parseInt(v)
        })
    })

    const epsilon = frequencies.map(f => f > fields.length / 2 ? 1 : 0).join("");
    const gamma = frequencies.map(f => f > fields.length / 2 ? 0 : 1).join("");

    return parseInt(epsilon, 2) * parseInt(gamma, 2)
}

function partTwo() {
    function findScore(mod: boolean) {
        let i = 0;
        let remaining = [...fields];

        while (remaining.length > 2) {
            const frequencies = new Array(bitCount).fill(0);

            remaining.forEach((f) => {
                Array.from(f).forEach((v, j) => {
                    frequencies[j] += parseInt(v)
                })
            });

            if (frequencies[i] === remaining.length / 2) {
                break;
            }
            const significant = frequencies[i] > remaining.length / 2
                ? mod ? 1 : 0
                : mod ? 0 : 1;


            console.log(
                new Array(remaining.length)
                    .fill(
                        `${new Array(i).fill(" ").join("")}${significant}${new Array(bitCount - i).join(" ")}`
                    )
                    .join(" ")
            )
            console.log(remaining.join(" "));

            remaining = remaining.filter(f => parseInt(f[i]) === significant)
            if (remaining.length > 1) i++;
        }
        console.log(
            new Array(remaining.length)
                .fill(
                    `${new Array(i).fill(" ").join("")}${mod ? 1 : 0}${new Array(bitCount - i).join(" ")}`
                )
                .join(" ")
        )
        console.log(remaining.join(" "));

        const val = remaining.length > 1
            ? remaining.filter(
                v => v[i] === (mod ? "1" : "0")
            ).reduce((a, b) => a + parseInt(b, 2), 0) ?? 0
            : parseInt(remaining[0], 2)
        console.log("")
        console.log(`\t-> ${val}`)
        return val;
        // return parseInt(remaining.find(
        //     v => v[i] === (mod ? "1" : "0")
        // ) ?? "0", 2)
    }

    const oxy = findScore(true);
    console.log("\n\n")
    const co2 = findScore(false);
    console.log(oxy, co2)

    return oxy * co2;

    // // Get Oxy
    // let i = 0;


    // // Get C02
    // i = 0;
    // remaining = [...fields];
    // while (remaining.length > 2) {
    //     const frequencies = new Array(bitCount).fill(0);

    //     remaining.forEach((f) => {
    //         Array.from(f).forEach((v, j) => {
    //             frequencies[j] += parseInt(v)
    //         })
    //     });

    //     if (frequencies[i] === remaining.length / 2) break;

    //     const leastCommon = frequencies[i] < remaining.length / 2 ? 1 : 0;

    //     remaining = remaining.filter(f => parseInt(f[i]) === leastCommon)
    //     i++;
    // }

    // const co2 = parseInt(
    //     remaining.length > 1
    //         ? remaining.find(
    //             v => v[i] === "0"
    //         ) ?? "0"
    //         : remaining[0], 2
    // )
    // console.log(co2, oxy, co2 * oxy);
    // return co2 * oxy;
}


console.log("Part One", partOne());

console.log("Part Two", partTwo());